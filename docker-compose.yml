version: "3"

services:
  backend:
    build: ./
    container_name: backend
    working_dir: /store
    ports:
      - ${LOCAL_PORT}:${WSGI_PORT}
    command:
      - ./commands/start_server_${MODE}.sh
    volumes:
      - ./src:/store/src
      - static_content:/store/src/static
      - media_content:/store/src/media
    env_file:
      - .env
#    depends_on:
#      - postgres

  nginx:
    image: nginx:1.19
    container_name: nginx_ws
    volumes:
      - static_content:/store/src/static
      - media_content:/store/src/media
      - ./nginx:/etc/nginx/conf.d
    ports:
      - ${HTTP_PORT}
      - ${HTTPS_PORT}
    env_file:
      - .env
    depends_on:
      - backend

#  postgres:
#    image: postgres:12
#    container_name: postgres_db
#    ports:
#      - ${DOCKER_POSTGRES_PORT}
#    volumes:
#      - pg_data:/var/lib/postgresql/data
#    env_file:
#      - .env

#  pgadmin:
#    container_name: postgres_admin
#    image: dpage/pgadmin4
#    restart: on-failure
#    env_file:
#      - .env
#    ports:
#      - ${DOCKER_PG_ADMIN_PORT}
#    volumes:
#      - pgadmin_data:/var/lib/pgadmin
#    depends_on:
#      - postgres

#  mongodb:
#    image: mongo:3.6
#    container_name: mongo_db
#    ports:
#      - ${DOCKER_MONGO_PORT}
#    command: [ "--bind_ip_all", "--smallfiles" ]
#    volumes:
#      - mongo_data:/data/db
#    env_file:
#      - .env
#    restart: always

#  mongoadmin:
#    image: mongo-express
#    restart: on-failure
#    container_name: mongo_admin
#    ports:
#      - ${DOCKER_MONGO_ADMIN_PORT}
#    env_file:
#      - .env
#    links:
#      - mongodb
#    depends_on:
#      - mongodb

#  redis:
#    image: redis
#    restart: on-failure
#    container_name: redis_db
#    env_file:
#      - .env
#    depends_on:
#      - backend
#
#  celery:
#    build: ./
#    command:
#      - ./commands/start_celery.sh
#    restart: always
#    container_name: celery
#    volumes:
#      - ./src:/store
#      - ./commands:/store/commands
#    env_file:
#      - .env
#    depends_on:
#      - redis
#      - backend

#  celerybeat:
#    build: ./
#    command:
#      - ./commands/start_celerybeat.sh
#    restart: always
#    container_name: celerybeat
#    volumes:
#      - ./src:/store
#      - ./commands:/store/commands
#    env_file:
#      - .env
#    depends_on:
#      - redis
#      - backend

#  flower:
#    build: ./
#    container_name: celery_admin
#    command: celery -A config flower --broker=redis://redis
#    volumes:
#      - ./src:/store
#    env_file:
#      - .env
#    ports:
#      - ${DOCKER_FLOWER_PORT}
#    restart: on-failure
#    depends_on:
#      - celery
#      - redis

#  redisadmin:
#    image: rediscommander/redis-commander:latest
#    container_name: redis_admin
#    hostname: redis_admin
#    restart: always
#    ports:
#      - ${DOCKER_REDIS_ADMIN_PORTS}
#    env_file:
#      - .env

volumes:
  static_content: { }
  media_content: { }
#  mongo_data: { }
#  pg_data: { }
#  pgadmin_data: { }
